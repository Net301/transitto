{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\";\nconst IS_STRING = \"IS_STRING\";\nconst IS_COLOR = \"IS_COLOR\";\n\nconst useTransition = (from, to, seconds = 1) => {\n  //const [valueFrom, valueTo] = decodeFromTo(from, to);\n  //factory checks type (number, percentage, color or string)\n  return transitionFactory(from, to, seconds);\n};\n\nconst transitionFactory = (from, to, seconds) => {\n  const inputType = transitionType(from, to);\n\n  switch (inputType) {\n    case IS_NUMBER:\n      return IncrementNumber(from, to, seconds);\n\n    case IS_STRING:\n      return IncrementString(from, to, seconds);\n\n    case IS_COLOR:\n      return IncrementColor(from, to, seconds);\n\n    case IS_UNKNOWN:\n    case IS_INCOMPARABLE:\n    default:\n      return from;\n  }\n};\n\nconst IncrementNumber = (from, to, seconds) => {\n  return useIncrement(from, to, seconds);\n};\n\nconst IncrementString = (from, to, seconds) => {\n  const fromLength = from.length;\n  const toLength = to.length;\n  return to.substring(from.Length, Math.round(useIncrement(fromLength, toLength, seconds)));\n};\n\nconst IncrementColor = (from, to, seconds) => {\n  const fromRGB = hexToRgb(from);\n  const toRGB = hexToRgb(to);\n  console.log(toRGB.r);\n  const rColor = useIncrement(parseInt(0), parseInt(10), 10); // const r = useIncrement(0,20, 10);\n\n  const gColor = useIncrement(parseInt(fromRGB.g), parseInt(toRGB.g), seconds);\n  const bColor = useIncrement(parseInt(fromRGB.b), parseInt(toRGB.b), seconds);\n  console.log(rColor);\n  return rgbToHex(10, 10, 10);\n};\n\nconst hexToRgb = hex => {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\n\nconst rgbToHex = (r, g, b) => {\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\nconst transitionType = (from, to, seconds) => {\n  if (typeof from !== typeof to) {\n    return IS_INCOMPARABLE;\n  }\n\n  switch (typeof from) {\n    case \"number\":\n      return IS_NUMBER;\n\n    case \"string\":\n      if (areColors(from, to)) {\n        return IS_COLOR;\n      }\n\n      return IS_STRING;\n\n    default:\n      return IS_UNKNOWN;\n  }\n};\n\nconst areColors = (from, to) => {\n  return !from.search(/^#([0-9A-F]{3}){1,2}$/i) && !to.search(/^#([0-9A-F]{3}){1,2}$/i);\n};\n\nconst useIncrement = (from, to, seconds) => {\n  const [transitionValue, setTransitionValue] = useState(from, to);\n  useEffect(() => {\n    if (to != null) {\n      const velocity = getVelocityInMillis(from, to, seconds);\n      const interval = setInterval(() => {\n        setTransitionValue(transitionValue + velocity);\n      }, velocity * 1000);\n\n      if (transitionValue >= to) {\n        setTransitionValue(to);\n        clearInterval(interval);\n      }\n\n      return () => clearInterval(interval);\n    }\n  }, [seconds, transitionValue, from, to]);\n  return transitionValue;\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","IS_NUMBER","IS_UNKNOWN","IS_INCOMPARABLE","IS_STRING","IS_COLOR","useTransition","from","to","seconds","transitionFactory","inputType","transitionType","IncrementNumber","IncrementString","IncrementColor","useIncrement","fromLength","length","toLength","substring","Length","Math","round","fromRGB","hexToRgb","toRGB","console","log","r","rColor","parseInt","gColor","g","bColor","b","rgbToHex","hex","shorthandRegex","replace","m","result","exec","toString","slice","areColors","search","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\"\nconst IS_STRING = \"IS_STRING\";\nconst IS_COLOR = \"IS_COLOR\";\n\nconst useTransition = (from, to, seconds = 1) => {\n    //const [valueFrom, valueTo] = decodeFromTo(from, to);\n    //factory checks type (number, percentage, color or string)\n    return transitionFactory(from, to, seconds);\n\n\n}\n\nconst transitionFactory = (from, to, seconds) => {\n    const inputType = transitionType(from, to);\n\n    switch (inputType) {\n        case IS_NUMBER:\n            return IncrementNumber(from, to, seconds);\n        case IS_STRING:\n            return IncrementString(from, to, seconds);\n        case IS_COLOR:\n            return IncrementColor(from, to, seconds);\n        case IS_UNKNOWN:\n        case IS_INCOMPARABLE:\n        default:\n            return from;\n    }\n}\n\nconst IncrementNumber = (from, to, seconds) => {\n    return useIncrement(from, to, seconds);\n}\n\nconst IncrementString = (from, to, seconds) => {\n    const fromLength = from.length;\n    const toLength = to.length;\n\n    return to.substring(from.Length, Math.round(useIncrement(fromLength, toLength, seconds)));\n}\n\nconst IncrementColor = (from, to, seconds) => {\n    const fromRGB = hexToRgb(from);\n    const toRGB = hexToRgb(to);\n\n    console.log(toRGB.r)\n    const rColor  = useIncrement(parseInt(0),parseInt(10),10);\n    \n\n    // const r = useIncrement(0,20, 10);\n    const gColor = useIncrement(parseInt(fromRGB.g), parseInt(toRGB.g), seconds);\n    const bColor = useIncrement(parseInt(fromRGB.b), parseInt(toRGB.b), seconds);\n\n    console.log(rColor);\n    return rgbToHex(10,10,10);\n\n}\n\nconst hexToRgb = (hex) => {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nconst rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nconst transitionType = (from, to, seconds) => {\n    if (typeof (from) !== typeof (to)) {\n        return IS_INCOMPARABLE;\n    }\n\n    switch (typeof (from)) {\n        case \"number\":\n            return IS_NUMBER;\n        case \"string\":\n            if (areColors(from, to)) {\n                return IS_COLOR;\n            }\n            return IS_STRING;\n        default:\n            return IS_UNKNOWN;\n    }\n}\n\nconst areColors = (from, to) => {\n    return !from.search(/^#([0-9A-F]{3}){1,2}$/i) && !to.search(/^#([0-9A-F]{3}){1,2}$/i);\n}\n\nconst useIncrement = (from, to, seconds) => {\n    const [transitionValue, setTransitionValue] = useState(from, to);\n\n    useEffect(() => {\n        if (to != null) {\n            const velocity = getVelocityInMillis(from, to, seconds);\n            const interval = setInterval(() => {\n                setTransitionValue(transitionValue + velocity)\n            }, velocity * 1000);\n\n            if (transitionValue >= to) {\n                setTransitionValue(to);\n                clearInterval(interval);\n            }\n\n            return () => clearInterval(interval);\n        }\n\n    }, [seconds, transitionValue, from, to]);\n\n\n    return transitionValue;\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to - from) / seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}