{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_UNCOMPERABLE = \"IS_UNCOMPERABLE\";\n\nconst useTransition = (from, to, seconds = 1) => {\n  //const [valueFrom, valueTo] = decodeFromTo(from, to);\n  //factory checks type (number, percentage, color or string)\n  const inputType = transitionTypeFactory(from, to);\n  console.log(inputType);\n\n  switch (inputType) {\n    case IS_NUMBER:\n      return Increment(from, to, seconds);\n\n    case IS_UNKNOWN:\n    case IS_UNCOMPERABLE:\n    default:\n      return from;\n  }\n};\n\nconst transitionTypeFactory = (from, to, seconds) => {\n  if (typeof from !== typeof to) {\n    return IS_UNCOMPERABLE;\n  }\n\n  switch (typeof from) {\n    case IS_NUMBER:\n    default:\n      return IS_UNKNOWN;\n  }\n};\n\nconst Increment = (from, to, seconds) => {\n  const [transitionValue, setTransitionValue] = useState(from, to);\n  useEffect(() => {\n    if (to != null) {\n      const velocity = getVelocityInMillis(from, to, seconds);\n      const interval = setInterval(() => {\n        setTransitionValue(transitionValue + velocity);\n      }, velocity * 1000);\n\n      if (transitionValue >= to) {\n        setTransitionValue(to);\n        clearInterval(interval);\n      }\n\n      return () => clearInterval(interval);\n    }\n  }, [seconds, transitionValue, from, to]);\n  return transitionValue;\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","IS_NUMBER","IS_UNKNOWN","IS_UNCOMPERABLE","useTransition","from","to","seconds","inputType","transitionTypeFactory","console","log","Increment","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,eAAe,GAAG,iBAAxB;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,EAAP,EAAWC,OAAO,GAAG,CAArB,KAA2B;AAC7C;AACA;AAEA,QAAMC,SAAS,GAAGC,qBAAqB,CAACJ,IAAD,EAAOC,EAAP,CAAvC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AACA,UAAQA,SAAR;AACI,SAAKP,SAAL;AACI,aAAOW,SAAS,CAACP,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAAhB;;AACJ,SAAKL,UAAL;AACA,SAAKC,eAAL;AACA;AACI,aAAOE,IAAP;AANR;AASH,CAhBD;;AAmBA,MAAMI,qBAAqB,GAAG,CAACJ,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AACjD,MAAI,OAAQF,IAAR,KAAkB,OAAQC,EAA9B,EAAmC;AAC/B,WAAOH,eAAP;AACH;;AAED,UAAQ,OAAQE,IAAhB;AACI,SAAKJ,SAAL;AACA;AACI,aAAOC,UAAP;AAHR;AAKH,CAVD;;AAYA,MAAMU,SAAS,GAAG,CAACP,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AACrC,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAACM,IAAD,EAAOC,EAAP,CAAtD;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,EAAE,IAAI,IAAV,EAAgB;AACZ,YAAMS,QAAQ,GAAGC,mBAAmB,CAACX,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAApC;AACA,YAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BJ,QAAAA,kBAAkB,CAACD,eAAe,GAAGE,QAAnB,CAAlB;AACH,OAF2B,EAEzBA,QAAQ,GAAG,IAFc,CAA5B;;AAIA,UAAIF,eAAe,IAAIP,EAAvB,EAA2B;AACvBQ,QAAAA,kBAAkB,CAACR,EAAD,CAAlB;AACAa,QAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AAED,aAAO,MAAME,aAAa,CAACF,QAAD,CAA1B;AACH;AAEJ,GAfQ,EAeN,CAACV,OAAD,EAAUM,eAAV,EAA2BR,IAA3B,EAAiCC,EAAjC,CAfM,CAAT;AAkBA,SAAOO,eAAP;AACH,CAtBD;;AAwBA,MAAMG,mBAAmB,GAAG,CAACX,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC/C,MAAID,EAAE,KAAKD,IAAX,EAAiB;AACb,WAAO,CAACC,EAAE,GAAGD,IAAN,IAAcE,OAArB;AACH;;AACD,SAAOF,IAAP;AACH,CALD;;AAOA,SACID,aADJ","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_UNCOMPERABLE = \"IS_UNCOMPERABLE\"\n\nconst useTransition = (from, to, seconds = 1) => {\n    //const [valueFrom, valueTo] = decodeFromTo(from, to);\n    //factory checks type (number, percentage, color or string)\n\n    const inputType = transitionTypeFactory(from, to);\n\n    console.log(inputType);\n    switch (inputType) {\n        case IS_NUMBER:\n            return Increment(from, to, seconds);\n        case IS_UNKNOWN:\n        case IS_UNCOMPERABLE:\n        default:\n            return from;\n    }\n\n}\n\n\nconst transitionTypeFactory = (from, to, seconds) => {\n    if (typeof (from) !== typeof (to)) {\n        return IS_UNCOMPERABLE;\n    }\n\n    switch (typeof (from)) {\n        case IS_NUMBER:\n        default:\n            return IS_UNKNOWN;\n    }\n}\n\nconst Increment = (from, to, seconds) => {\n    const [transitionValue, setTransitionValue] = useState(from, to);\n\n    useEffect(() => {\n        if (to != null) {\n            const velocity = getVelocityInMillis(from, to, seconds);\n            const interval = setInterval(() => {\n                setTransitionValue(transitionValue + velocity)\n            }, velocity * 1000);\n\n            if (transitionValue >= to) {\n                setTransitionValue(to);\n                clearInterval(interval);\n            }\n\n            return () => clearInterval(interval);\n        }\n\n    }, [seconds, transitionValue, from, to]);\n\n\n    return transitionValue;\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to - from) / seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}