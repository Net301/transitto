{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\";\nconst IS_STRING = \"IS_STRING\";\nconst IS_COLOR = \"IS_COLOR\";\n\nconst useTransition = (from, to, seconds = 1, callback = () => null) => {\n  const cb = useCallback(() => callback(), [callback]);\n  return transitionFactory(from, to, seconds, cb);\n};\n\nconst transitionFactory = (from, to, seconds, callback) => {\n  const inputType = transitionType(from, to);\n\n  switch (inputType) {\n    case IS_NUMBER:\n      return IncrementNumber(from, to, seconds, () => callback());\n\n    case IS_STRING:\n      return IncrementString(from, to, seconds, () => 0);\n\n    case IS_COLOR:\n      return IncrementColor(from, to, seconds, () => 0);\n\n    case IS_UNKNOWN:\n    case IS_INCOMPARABLE:\n    default:\n      return from;\n  }\n};\n\nconst IncrementNumber = (from, to, seconds, callback) => {\n  const cb = useCallback(() => callback(), [callback]);\n  return useIncrement(from, to, seconds, cb);\n};\n\nconst IncrementString = (from, to, seconds, callback) => {\n  const fromLength = from.length;\n  const toLength = to.length;\n  return to.substring(from.Length, Math.round(useIncrement(fromLength, toLength, seconds, callback())));\n};\n\nconst IncrementColor = (from, to, seconds, callback) => {\n  const fromRGB = hexToRgb(from);\n  const toRGB = hexToRgb(to);\n  const r = Math.round(useIncrement(Math.round(parseInt(fromRGB.r)), Math.round(parseInt(toRGB.r)), seconds), callback());\n  const g = Math.round(useIncrement(Math.round(parseInt(fromRGB.g)), Math.round(parseInt(toRGB.g)), seconds), callback());\n  const b = Math.round(useIncrement(Math.round(parseInt(fromRGB.b)), Math.round(parseInt(toRGB.b)), seconds), callback());\n  return rgbToHex(r, g, b);\n};\n\nconst hexToRgb = hex => {\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\n\nconst rgbToHex = (r, g, b) => {\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\nconst transitionType = (from, to, seconds) => {\n  if (typeof from !== typeof to) {\n    return IS_INCOMPARABLE;\n  }\n\n  switch (typeof from) {\n    case \"number\":\n      return IS_NUMBER;\n\n    case \"string\":\n      if (areColors(from, to)) {\n        return IS_COLOR;\n      }\n\n      return IS_STRING;\n\n    default:\n      return IS_UNKNOWN;\n  }\n};\n\nconst areColors = (from, to) => {\n  return !from.search(/^#([0-9A-F]{3}){1,2}$/i) && !to.search(/^#([0-9A-F]{3}){1,2}$/i);\n};\n\nconst useIncrement = (from, to, seconds, callback) => {\n  const [transitionValue, setTransitionValue] = useState(from, to);\n  useEffect(() => {\n    if (to != null) {\n      const velocity = getVelocityInMillis(from, to, seconds);\n      const interval = setInterval(() => {\n        setTransitionValue(transitionValue + velocity / 1000);\n      }, velocity / (to - from) * seconds);\n\n      if (transitionValue <= to && velocity < 0 || transitionValue >= to && velocity > 0) {\n        setTransitionValue(to);\n        clearInterval(interval);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [seconds, transitionValue, from, to]);\n  useEffect(() => {\n    if (transitionValue === to) {\n      callback();\n    }\n  }, [transitionValue, callback, to]);\n  return transitionValue;\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","useCallback","IS_NUMBER","IS_UNKNOWN","IS_INCOMPARABLE","IS_STRING","IS_COLOR","useTransition","from","to","seconds","callback","cb","transitionFactory","inputType","transitionType","IncrementNumber","IncrementString","IncrementColor","useIncrement","fromLength","length","toLength","substring","Length","Math","round","fromRGB","hexToRgb","toRGB","r","parseInt","g","b","rgbToHex","hex","shorthandRegex","replace","m","result","exec","toString","slice","areColors","search","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\n\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\"\nconst IS_STRING = \"IS_STRING\";\nconst IS_COLOR = \"IS_COLOR\";\n\nconst useTransition = (from, to, seconds = 1, callback = () => null) => {\n    const cb = useCallback(() => callback(), [callback]);\n    return transitionFactory(from, to, seconds, cb);\n}\n\nconst transitionFactory = (from, to, seconds, callback) => {\n    const inputType = transitionType(from, to);\n    switch (inputType) {\n        case IS_NUMBER:\n            return IncrementNumber(from, to, seconds, () => callback());\n        case IS_STRING:\n            return IncrementString(from, to, seconds, ()=>0);\n        case IS_COLOR:\n            return IncrementColor(from, to, seconds, ()=>0);\n        case IS_UNKNOWN:\n        case IS_INCOMPARABLE:\n        default:\n            return from;\n    }\n}\n\nconst IncrementNumber = (from, to, seconds, callback) => {\n    const cb = useCallback(() => callback(), [callback]);\n    return useIncrement(from, to, seconds, cb);\n}\n\nconst IncrementString = (from, to, seconds, callback) => {\n    const fromLength = from.length;\n    const toLength = to.length;\n\n    return to.substring(from.Length, Math.round(useIncrement(fromLength, toLength, seconds, callback())));\n}\n\nconst IncrementColor = (from, to, seconds, callback) => {\n    const fromRGB = hexToRgb(from);\n    const toRGB = hexToRgb(to);\n\n    const r = Math.round(useIncrement(Math.round(parseInt(fromRGB.r)), Math.round(parseInt(toRGB.r)), seconds), callback());\n    const g = Math.round(useIncrement(Math.round(parseInt(fromRGB.g)), Math.round(parseInt(toRGB.g)), seconds), callback());\n    const b = Math.round(useIncrement(Math.round(parseInt(fromRGB.b)), Math.round(parseInt(toRGB.b)), seconds), callback());\n    return rgbToHex(r, g, b);\n\n}\n\nconst hexToRgb = (hex) => {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nconst rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nconst transitionType = (from, to, seconds) => {\n    if (typeof (from) !== typeof (to)) {\n        return IS_INCOMPARABLE;\n    }\n\n    switch (typeof (from)) {\n        case \"number\":\n            return IS_NUMBER;\n        case \"string\":\n            if (areColors(from, to)) {\n                return IS_COLOR;\n            }\n            return IS_STRING;\n        default:\n            return IS_UNKNOWN;\n    }\n}\n\nconst areColors = (from, to) => {\n    return !from.search(/^#([0-9A-F]{3}){1,2}$/i) && !to.search(/^#([0-9A-F]{3}){1,2}$/i);\n}\n\nconst useIncrement = (from, to, seconds, callback) => {\n    const [transitionValue, setTransitionValue] = useState(from, to);\n\n    useEffect(() => {\n        if (to != null) {\n            const velocity = getVelocityInMillis(from, to, seconds);\n\n            const interval = setInterval(() => {\n                setTransitionValue(transitionValue + velocity / 1000)\n            }, (velocity / (to - from) * seconds));\n\n            if (\n                (transitionValue <= to && velocity < 0)\n                ||\n                (transitionValue >= to && velocity > 0)\n            ) {     \n                setTransitionValue(to);\n                clearInterval(interval);\n            }\n\n            return () => { clearInterval(interval); }\n        }\n\n    }, [seconds, transitionValue, from, to]);\n\n    useEffect(() => {\n        if (transitionValue === to) {\n            callback()\n        }\n    }, [transitionValue, callback, to])\n\n    return transitionValue;\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to - from) / seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}