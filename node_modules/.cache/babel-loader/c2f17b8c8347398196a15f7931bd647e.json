{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useTransition = (from, to, seconds = 1) => {\n  const [valueFrom, valueTo] = decodeFromTo(from, to);\n  const value = useIncrement;\n  return value;\n};\n\nconst useIncrement = (from, to, seconds) => {\n  const [transitionValue, setTransitionValue] = useState(from, to);\n  useEffect(() => {\n    if (to != null) {\n      const velocity = getVelocityInMillis(from, to, seconds);\n      const interval = setInterval(() => {\n        setTransitionValue(transitionValue + velocity);\n      }, velocity * 1000);\n\n      if (transitionValue >= to) {\n        setTransitionValue(to);\n        clearInterval(interval);\n      }\n\n      return () => clearInterval(interval);\n    }\n  }, [seconds, transitionValue, valueFrom, valueTo]);\n  if (valueTo == null) return from;\n  return transitionValue;\n};\n\nconst decodeFromTo = (from, to) => {\n  if (typeof from !== typeof to) {\n    return [null, null];\n  }\n\n  switch (typeof from) {\n    case \"number\":\n      return [from, to];\n\n    case \"string\":\n      return [0, 10];\n\n    default:\n      return [null, null];\n  }\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","useTransition","from","to","seconds","valueFrom","valueTo","decodeFromTo","value","useIncrement","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,EAAP,EAAWC,OAAO,GAAG,CAArB,KAA2B;AAC7C,QAAM,CAACC,SAAD,EAAYC,OAAZ,IAAuBC,YAAY,CAACL,IAAD,EAAOC,EAAP,CAAzC;AACA,QAAMK,KAAK,GAAGC,YAAd;AACA,SAAOD,KAAP;AAEH,CALD;;AAOA,MAAMC,YAAY,GAAG,CAACP,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AACxC,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAACG,IAAD,EAAOC,EAAP,CAAtD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,EAAE,IAAI,IAAV,EAAgB;AACZ,YAAMS,QAAQ,GAAGC,mBAAmB,CAACX,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAApC;AACA,YAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BJ,QAAAA,kBAAkB,CAACD,eAAe,GAAGE,QAAnB,CAAlB;AACH,OAF2B,EAEzBA,QAAQ,GAAG,IAFc,CAA5B;;AAIA,UAAIF,eAAe,IAAIP,EAAvB,EAA2B;AACvBQ,QAAAA,kBAAkB,CAACR,EAAD,CAAlB;AACAa,QAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AAED,aAAO,MAAME,aAAa,CAACF,QAAD,CAA1B;AACH;AAEJ,GAfQ,EAeN,CAACV,OAAD,EAAUM,eAAV,EAA2BL,SAA3B,EAAsCC,OAAtC,CAfM,CAAT;AAiBA,MAAIA,OAAO,IAAI,IAAf,EACI,OAAOJ,IAAP;AAGJ,SAAOQ,eAAP;AACH,CAzBD;;AA2BA,MAAMH,YAAY,GAAG,CAACL,IAAD,EAAOC,EAAP,KAAc;AAC/B,MAAI,OAAQD,IAAR,KAAkB,OAAQC,EAA9B,EAAmC;AAC/B,WAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACH;;AAED,UAAQ,OAAQD,IAAhB;AACI,SAAK,QAAL;AACI,aAAO,CAACA,IAAD,EAAOC,EAAP,CAAP;;AACJ,SAAK,QAAL;AACI,aAAO,CAAC,CAAD,EAAI,EAAJ,CAAP;;AACJ;AACI,aAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AANR;AAQH,CAbD;;AAeA,MAAMU,mBAAmB,GAAG,CAACX,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC/C,MAAID,EAAE,KAAKD,IAAX,EAAiB;AACb,WAAO,CAACC,EAAE,GAAGD,IAAN,IAAcE,OAArB;AACH;;AACD,SAAOF,IAAP;AACH,CALD;;AAOA,SACID,aADJ","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useTransition = (from, to, seconds = 1) => {\n    const [valueFrom, valueTo] = decodeFromTo(from, to);\n    const value = useIncrement\n    return value;\n\n}\n\nconst useIncrement = (from, to, seconds) => {\n    const [transitionValue, setTransitionValue] = useState(from, to);\n\n    useEffect(() => {\n        if (to != null) {\n            const velocity = getVelocityInMillis(from, to, seconds);\n            const interval = setInterval(() => {\n                setTransitionValue(transitionValue + velocity)\n            }, velocity * 1000);\n\n            if (transitionValue >= to) {\n                setTransitionValue(to);\n                clearInterval(interval);\n            }\n\n            return () => clearInterval(interval);\n        }\n\n    }, [seconds, transitionValue, valueFrom, valueTo]);\n\n    if (valueTo == null)\n        return from;\n\n\n    return transitionValue;\n}\n\nconst decodeFromTo = (from, to) => {\n    if (typeof (from) !== typeof (to)) {\n        return [null, null];\n    }\n\n    switch (typeof (from)) {\n        case \"number\":\n            return [from, to];\n        case \"string\":\n            return [0, 10];\n        default:\n            return [null, null];\n    }\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to - from) / seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}