{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\";\nconst IS_STRING = \"IS_STRING\";\n\nconst useTransition = (from, to, seconds = 1) => {\n  //const [valueFrom, valueTo] = decodeFromTo(from, to);\n  //factory checks type (number, percentage, color or string)\n  return transitionFactory(from, to, seconds);\n};\n\nconst transitionFactory = (from, to, seconds) => {\n  const inputType = transitionType(from, to);\n\n  switch (inputType) {\n    case IS_NUMBER:\n      return IncrementNumber(from, to, seconds);\n\n    case IS_STRING:\n      return IncrementString(from, to, seconds);\n\n    case IS_UNKNOWN:\n    case IS_INCOMPARABLE:\n    default:\n      return from;\n  }\n};\n\nconst IncrementNumber = (from, to, seconds) => {\n  return useIncrement(from, to, seconds);\n};\n\nconst IncrementString = (from, to, seconds) => {\n  const fromLength = from.length;\n  const toLength = to.length;\n  return Math.round(useIncrement(fromLength, toLength, seconds));\n};\n\nconst transitionType = (from, to, seconds) => {\n  if (typeof from !== typeof to) {\n    return IS_INCOMPARABLE;\n  }\n\n  switch (typeof from) {\n    case \"number\":\n      return IS_NUMBER;\n\n    case \"string\":\n      return IS_STRING;\n\n    default:\n      return IS_UNKNOWN;\n  }\n};\n\nconst useIncrement = (from, to, seconds) => {\n  const [transitionValue, setTransitionValue] = useState(from, to);\n  useEffect(() => {\n    if (to != null) {\n      const velocity = getVelocityInMillis(from, to, seconds);\n      const interval = setInterval(() => {\n        setTransitionValue(transitionValue + velocity);\n      }, velocity * 1000);\n\n      if (transitionValue >= to) {\n        setTransitionValue(to);\n        clearInterval(interval);\n      }\n\n      return () => clearInterval(interval);\n    }\n  }, [seconds, transitionValue, from, to]);\n  return transitionValue;\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","IS_NUMBER","IS_UNKNOWN","IS_INCOMPARABLE","IS_STRING","useTransition","from","to","seconds","transitionFactory","inputType","transitionType","IncrementNumber","IncrementString","useIncrement","fromLength","length","toLength","Math","round","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\"\nconst IS_STRING = \"IS_STRING\";\n\nconst useTransition = (from, to, seconds = 1) => {\n    //const [valueFrom, valueTo] = decodeFromTo(from, to);\n    //factory checks type (number, percentage, color or string)\n    return transitionFactory(from, to, seconds);\n\n\n}\n\nconst transitionFactory = (from, to, seconds) => {\n    const inputType = transitionType(from, to);\n\n    switch (inputType) {\n        case IS_NUMBER:\n            return IncrementNumber(from, to, seconds);\n        case IS_STRING:\n            return IncrementString(from, to, seconds);\n        case IS_UNKNOWN:\n        case IS_INCOMPARABLE:\n        default:\n            return from;\n    }  \n}\n\nconst IncrementNumber = (from, to, seconds) => {\n    return useIncrement(from, to, seconds);\n}\n\nconst IncrementString = (from, to, seconds) => {\n    const fromLength = from.length;\n    const toLength = to.length;\n\n    return Math.round(useIncrement(fromLength, toLength, seconds));\n\n}\n\nconst transitionType = (from, to, seconds) => {\n    if (typeof (from) !== typeof (to)) {\n        return IS_INCOMPARABLE;\n    }\n\n    switch (typeof (from)) {\n        case \"number\":\n            return IS_NUMBER;\n        case \"string\":\n            return IS_STRING;\n        default:\n            return IS_UNKNOWN;\n    }\n}\n\nconst useIncrement = (from, to, seconds) => {\n    const [transitionValue, setTransitionValue] = useState(from, to);\n\n    useEffect(() => {\n        if (to != null) {\n            const velocity = getVelocityInMillis(from, to, seconds);\n            const interval = setInterval(() => {\n                setTransitionValue(transitionValue + velocity)\n            }, velocity * 1000);\n\n            if (transitionValue >= to) {\n                setTransitionValue(to);\n                clearInterval(interval);\n            }\n\n            return () => clearInterval(interval);\n        }\n\n    }, [seconds, transitionValue, from, to]);\n\n\n    return transitionValue;\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to - from) / seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}