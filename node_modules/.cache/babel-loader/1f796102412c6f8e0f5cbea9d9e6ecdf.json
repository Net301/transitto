{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useTransition = (valueFrom, valueTo, seconds = 1) => {\n  const [transitionValue, setTransitionValue] = useState(valueFrom, valueTo);\n  useEffect(() => {\n    const velocity = getChange(valueFrom, valueTo, seconds);\n    const interval = setInterval(() => {\n      setTransitionValue(transitionValue + velocity);\n    }, velocity);\n\n    if (transitionValue === valueTo) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, transitionValue, valueFrom, valueTo]);\n  return transitionValue;\n};\n\nconst getChange = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","useTransition","valueFrom","valueTo","seconds","transitionValue","setTransitionValue","velocity","getChange","interval","setInterval","clearInterval","from","to"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,OAAO,GAAG,CAA/B,KAAqC;AACvD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAACG,SAAD,EAAYC,OAAZ,CAAtD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AAEhB,UAAMO,QAAQ,GAAGC,SAAS,CAACN,SAAD,EAAYC,OAAZ,EAAqBC,OAArB,CAA1B;AACC,UAAMK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC5BJ,MAAAA,kBAAkB,CAACD,eAAe,GAACE,QAAjB,CAAlB;AACH,KAFwB,EAEtBA,QAFsB,CAA5B;;AAID,QAAIF,eAAe,KAAKF,OAAxB,EAAiC;AAC7BQ,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AAED,WAAO,MAAME,aAAa,CAACF,QAAD,CAA1B;AAEC,GAbQ,EAaN,CAACL,OAAD,EAAUC,eAAV,EAA2BH,SAA3B,EAAsCC,OAAtC,CAbM,CAAT;AAeA,SAAOE,eAAP;AACH,CAnBD;;AAqBA,MAAMG,SAAS,GAAG,CAACI,IAAD,EAAOC,EAAP,EAAWT,OAAX,KAAuB;AACrC,MAAIS,EAAE,KAAKD,IAAX,EAAiB;AACb,WAAO,CAACC,EAAE,GAACD,IAAJ,IAAUR,OAAjB;AACH;;AACD,SAAOQ,IAAP;AACH,CALD;;AAOA,SACIX,aADJ","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useTransition = (valueFrom, valueTo, seconds = 1) => {\n    const [transitionValue, setTransitionValue] = useState(valueFrom, valueTo);\n\n    useEffect(() => {\n\n    const velocity = getChange(valueFrom, valueTo, seconds);\n     const interval = setInterval(() => {\n            setTransitionValue(transitionValue+velocity)\n        }, velocity);\n\n    if (transitionValue === valueTo) {\n        clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n\n    }, [seconds, transitionValue, valueFrom, valueTo]);\n\n    return transitionValue;\n}\n\nconst getChange = (from, to, seconds) => {\n    if (to !== from) {\n        return (to-from)/seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}