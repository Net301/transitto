{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useTransition = (valueFrom, valueTo, seconds = 1) => {\n  const [transitionValue, setTransitionValue] = useState(valueFrom, valueTo);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTransitionValue(transitionValue + getChange(valueFrom, valueTo, seconds));\n    }, 1000);\n\n    if (transitionValue == to) {\n      return () => clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, transitionValue, valueFrom, valueTo]);\n  return transitionValue;\n};\n\nconst getChange = (from, to, seconds) => {\n  return (to - from) / seconds;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","useTransition","valueFrom","valueTo","seconds","transitionValue","setTransitionValue","interval","setInterval","getChange","to","clearInterval","from"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,OAAO,GAAG,CAA/B,KAAqC;AACvD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAACG,SAAD,EAAYC,OAAZ,CAAtD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC5BF,MAAAA,kBAAkB,CAACD,eAAe,GAACI,SAAS,CAACP,SAAD,EAAYC,OAAZ,EAAqBC,OAArB,CAA1B,CAAlB;AACH,KAFwB,EAEtB,IAFsB,CAA5B;;AAID,QAAIC,eAAe,IAAIK,EAAvB,EAA2B;AACvB,aAAO,MAAMC,aAAa,CAACJ,QAAD,CAA1B;AACH;;AACD,WAAO,MAAMI,aAAa,CAACJ,QAAD,CAA1B;AAEC,GAVQ,EAUN,CAACH,OAAD,EAAUC,eAAV,EAA2BH,SAA3B,EAAsCC,OAAtC,CAVM,CAAT;AAYA,SAAOE,eAAP;AACH,CAhBD;;AAkBA,MAAMI,SAAS,GAAG,CAACG,IAAD,EAAOF,EAAP,EAAWN,OAAX,KAAuB;AACrC,SAAO,CAACM,EAAE,GAACE,IAAJ,IAAUR,OAAjB;AACH,CAFD;;AAIA,SACIH,aADJ","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useTransition = (valueFrom, valueTo, seconds = 1) => {\n    const [transitionValue, setTransitionValue] = useState(valueFrom, valueTo);\n\n    useEffect(() => {\n     const interval = setInterval(() => {\n            setTransitionValue(transitionValue+getChange(valueFrom, valueTo, seconds))\n        }, 1000);\n\n    if (transitionValue == to) {\n        return () => clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n\n    }, [seconds, transitionValue, valueFrom, valueTo]);\n\n    return transitionValue;\n}\n\nconst getChange = (from, to, seconds) => {\n    return (to-from)/seconds;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}