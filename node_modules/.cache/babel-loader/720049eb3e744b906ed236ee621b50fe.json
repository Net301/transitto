{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\";\nconst IS_STRING = \"IS_STRING\";\nconst IS_COLOR = \"IS_COLOR\";\n\nconst useTransition = (from, to, seconds = 1) => {\n  //const [valueFrom, valueTo] = decodeFromTo(from, to);\n  //factory checks type (number, percentage, color or string)\n  return transitionFactory(from, to, seconds);\n};\n\nconst transitionFactory = (from, to, seconds) => {\n  const inputType = transitionType(from, to);\n\n  switch (inputType) {\n    case IS_NUMBER:\n      return IncrementNumber(from, to, seconds);\n\n    case IS_STRING:\n      return IncrementString(from, to, seconds);\n\n    case IS_COLOR:\n      return IncrementColor(from, to, seconds);\n\n    case IS_UNKNOWN:\n    case IS_INCOMPARABLE:\n    default:\n      return from;\n  }\n};\n\nconst IncrementNumber = (from, to, seconds) => {\n  return useIncrement(from, to, seconds);\n};\n\nconst IncrementString = (from, to, seconds) => {\n  const fromLength = from.length;\n  const toLength = to.length;\n  return to.substring(from.Length, Math.round(useIncrement(fromLength, toLength, seconds)));\n};\n\nconst IncrementColor = (from, to, seconds) => {\n  return hexToRgb(from).b;\n};\n\nfunction hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\nconst transitionType = (from, to, seconds) => {\n  if (typeof from !== typeof to) {\n    return IS_INCOMPARABLE;\n  }\n\n  switch (typeof from) {\n    case \"number\":\n      return IS_NUMBER;\n\n    case \"string\":\n      if (areColors(from, to)) {\n        return IS_COLOR;\n      }\n\n      return IS_STRING;\n\n    default:\n      return IS_UNKNOWN;\n  }\n};\n\nconst areColors = (from, to) => {\n  return !from.search(/^#([0-9A-F]{3}){1,2}$/i) && !to.search(/^#([0-9A-F]{3}){1,2}$/i);\n};\n\nconst useIncrement = (from, to, seconds) => {\n  const [transitionValue, setTransitionValue] = useState(from, to);\n  useEffect(() => {\n    if (to != null) {\n      const velocity = getVelocityInMillis(from, to, seconds);\n      const interval = setInterval(() => {\n        setTransitionValue(transitionValue + velocity);\n      }, velocity * 1000);\n\n      if (transitionValue >= to) {\n        setTransitionValue(to);\n        clearInterval(interval);\n      }\n\n      return () => clearInterval(interval);\n    }\n  }, [seconds, transitionValue, from, to]);\n  return transitionValue;\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","IS_NUMBER","IS_UNKNOWN","IS_INCOMPARABLE","IS_STRING","IS_COLOR","useTransition","from","to","seconds","transitionFactory","inputType","transitionType","IncrementNumber","IncrementString","IncrementColor","useIncrement","fromLength","length","toLength","substring","Length","Math","round","hexToRgb","b","hex","shorthandRegex","replace","m","r","g","result","exec","parseInt","areColors","search","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,QAAQ,GAAG,UAAjB;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,EAAP,EAAWC,OAAO,GAAG,CAArB,KAA2B;AAC7C;AACA;AACA,SAAOC,iBAAiB,CAACH,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAAxB;AAGH,CAND;;AAQA,MAAMC,iBAAiB,GAAG,CAACH,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC7C,QAAME,SAAS,GAAGC,cAAc,CAACL,IAAD,EAAOC,EAAP,CAAhC;;AAEA,UAAQG,SAAR;AACI,SAAKV,SAAL;AACI,aAAOY,eAAe,CAACN,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAAtB;;AACJ,SAAKL,SAAL;AACI,aAAOU,eAAe,CAACP,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAAtB;;AACJ,SAAKJ,QAAL;AACI,aAAOU,cAAc,CAACR,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAArB;;AACJ,SAAKP,UAAL;AACA,SAAKC,eAAL;AACA;AACI,aAAOI,IAAP;AAVR;AAYH,CAfD;;AAiBA,MAAMM,eAAe,GAAG,CAACN,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC3C,SAAOO,YAAY,CAACT,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAAnB;AACH,CAFD;;AAIA,MAAMK,eAAe,GAAG,CAACP,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC3C,QAAMQ,UAAU,GAAGV,IAAI,CAACW,MAAxB;AACA,QAAMC,QAAQ,GAAGX,EAAE,CAACU,MAApB;AAEA,SAAOV,EAAE,CAACY,SAAH,CAAab,IAAI,CAACc,MAAlB,EAA0BC,IAAI,CAACC,KAAL,CAAWP,YAAY,CAACC,UAAD,EAAaE,QAAb,EAAuBV,OAAvB,CAAvB,CAA1B,CAAP;AACH,CALD;;AAOA,MAAMM,cAAc,GAAG,CAACR,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC1C,SAAOe,QAAQ,CAACjB,IAAD,CAAR,CAAekB,CAAtB;AACH,CAFD;;AAIA,SAASD,QAAT,CAAkBE,GAAlB,EAAuB;AACnB;AACA,MAAIC,cAAc,GAAG,kCAArB;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAYD,cAAZ,EAA4B,UAAUE,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBN,CAAnB,EAAsB;AACpD,WAAOK,CAAC,GAAGA,CAAJ,GAAQC,CAAR,GAAYA,CAAZ,GAAgBN,CAAhB,GAAoBA,CAA3B;AACH,GAFK,CAAN;AAIA,MAAIO,MAAM,GAAG,4CAA4CC,IAA5C,CAAiDP,GAAjD,CAAb;AACA,SAAOM,MAAM,GAAG;AACZF,IAAAA,CAAC,EAAEI,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CADC;AAEZD,IAAAA,CAAC,EAAEG,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFC;AAGZP,IAAAA,CAAC,EAAES,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;AAHC,GAAH,GAIT,IAJJ;AAKH;;AAED,MAAMpB,cAAc,GAAG,CAACL,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC1C,MAAI,OAAQF,IAAR,KAAkB,OAAQC,EAA9B,EAAmC;AAC/B,WAAOL,eAAP;AACH;;AAED,UAAQ,OAAQI,IAAhB;AACI,SAAK,QAAL;AACI,aAAON,SAAP;;AACJ,SAAK,QAAL;AACI,UAAIkC,SAAS,CAAC5B,IAAD,EAAOC,EAAP,CAAb,EAAyB;AACrB,eAAOH,QAAP;AACH;;AACD,aAAOD,SAAP;;AACJ;AACI,aAAOF,UAAP;AATR;AAWH,CAhBD;;AAkBA,MAAMiC,SAAS,GAAG,CAAC5B,IAAD,EAAOC,EAAP,KAAc;AAC5B,SAAO,CAACD,IAAI,CAAC6B,MAAL,CAAY,wBAAZ,CAAD,IAA0C,CAAC5B,EAAE,CAAC4B,MAAH,CAAU,wBAAV,CAAlD;AACH,CAFD;;AAIA,MAAMpB,YAAY,GAAG,CAACT,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AACxC,QAAM,CAAC4B,eAAD,EAAkBC,kBAAlB,IAAwCvC,QAAQ,CAACQ,IAAD,EAAOC,EAAP,CAAtD;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,EAAE,IAAI,IAAV,EAAgB;AACZ,YAAM+B,QAAQ,GAAGC,mBAAmB,CAACjC,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAApC;AACA,YAAMgC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BJ,QAAAA,kBAAkB,CAACD,eAAe,GAAGE,QAAnB,CAAlB;AACH,OAF2B,EAEzBA,QAAQ,GAAG,IAFc,CAA5B;;AAIA,UAAIF,eAAe,IAAI7B,EAAvB,EAA2B;AACvB8B,QAAAA,kBAAkB,CAAC9B,EAAD,CAAlB;AACAmC,QAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AAED,aAAO,MAAME,aAAa,CAACF,QAAD,CAA1B;AACH;AAEJ,GAfQ,EAeN,CAAChC,OAAD,EAAU4B,eAAV,EAA2B9B,IAA3B,EAAiCC,EAAjC,CAfM,CAAT;AAkBA,SAAO6B,eAAP;AACH,CAtBD;;AAwBA,MAAMG,mBAAmB,GAAG,CAACjC,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC/C,MAAID,EAAE,KAAKD,IAAX,EAAiB;AACb,WAAO,CAACC,EAAE,GAAGD,IAAN,IAAcE,OAArB;AACH;;AACD,SAAOF,IAAP;AACH,CALD;;AAOA,SACID,aADJ","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst IS_NUMBER = \"IS_NUMBER\";\nconst IS_UNKNOWN = \"IS_UNKNOWN\";\nconst IS_INCOMPARABLE = \"IS_INCOMPARABLE\"\nconst IS_STRING = \"IS_STRING\";\nconst IS_COLOR = \"IS_COLOR\";\n\nconst useTransition = (from, to, seconds = 1) => {\n    //const [valueFrom, valueTo] = decodeFromTo(from, to);\n    //factory checks type (number, percentage, color or string)\n    return transitionFactory(from, to, seconds);\n\n\n}\n\nconst transitionFactory = (from, to, seconds) => {\n    const inputType = transitionType(from, to);\n\n    switch (inputType) {\n        case IS_NUMBER:\n            return IncrementNumber(from, to, seconds);\n        case IS_STRING:\n            return IncrementString(from, to, seconds);\n        case IS_COLOR:\n            return IncrementColor(from, to, seconds);\n        case IS_UNKNOWN:\n        case IS_INCOMPARABLE:\n        default:\n            return from;\n    }\n}\n\nconst IncrementNumber = (from, to, seconds) => {\n    return useIncrement(from, to, seconds);\n}\n\nconst IncrementString = (from, to, seconds) => {\n    const fromLength = from.length;\n    const toLength = to.length;\n\n    return to.substring(from.Length, Math.round(useIncrement(fromLength, toLength, seconds)));\n}\n\nconst IncrementColor = (from, to, seconds) => {\n    return hexToRgb(from).b;\n}\n\nfunction hexToRgb(hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nconst transitionType = (from, to, seconds) => {\n    if (typeof (from) !== typeof (to)) {\n        return IS_INCOMPARABLE;\n    }\n\n    switch (typeof (from)) {\n        case \"number\":\n            return IS_NUMBER;\n        case \"string\":\n            if (areColors(from, to)) {\n                return IS_COLOR;\n            }\n            return IS_STRING;\n        default:\n            return IS_UNKNOWN;\n    }\n}\n\nconst areColors = (from, to) => {\n    return !from.search(/^#([0-9A-F]{3}){1,2}$/i) && !to.search(/^#([0-9A-F]{3}){1,2}$/i);\n}\n\nconst useIncrement = (from, to, seconds) => {\n    const [transitionValue, setTransitionValue] = useState(from, to);\n\n    useEffect(() => {\n        if (to != null) {\n            const velocity = getVelocityInMillis(from, to, seconds);\n            const interval = setInterval(() => {\n                setTransitionValue(transitionValue + velocity)\n            }, velocity * 1000);\n\n            if (transitionValue >= to) {\n                setTransitionValue(to);\n                clearInterval(interval);\n            }\n\n            return () => clearInterval(interval);\n        }\n\n    }, [seconds, transitionValue, from, to]);\n\n\n    return transitionValue;\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to - from) / seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}