{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useTransition = (from, to, seconds = 1) => {\n  const [valueFrom, valueTo] = decodeFromTo(from, to);\n  const [transitionValue, setTransitionValue] = useState(valueFrom, valueTo);\n  useEffect(() => {\n    const velocity = getVelocityInMillis(valueFrom, valueTo, seconds);\n    const interval = setInterval(() => {\n      setTransitionValue(transitionValue + velocity);\n    }, velocity * 1000);\n\n    if (transitionValue === valueTo) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, transitionValue, valueFrom, valueTo]);\n  return transitionValue;\n};\n\nconst decodeFromTo = (from, to) => {\n  if (typeof from !== typeof to) {\n    return null;\n  }\n\n  switch (typeof from) {\n    case \"number\":\n      return [from, to];\n\n    default:\n      return [from, to];\n  }\n};\n\nconst getVelocityInMillis = (from, to, seconds) => {\n  if (to !== from) {\n    return (to - from) / seconds;\n  }\n\n  return from;\n};\n\nexport { useTransition };","map":{"version":3,"sources":["/home/nizar/dev/react/transitions/src/lib/useTransition.js"],"names":["useState","useEffect","useTransition","from","to","seconds","valueFrom","valueTo","decodeFromTo","transitionValue","setTransitionValue","velocity","getVelocityInMillis","interval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,EAAP,EAAWC,OAAO,GAAG,CAArB,KAA2B;AAC7C,QAAM,CAACC,SAAD,EAAYC,OAAZ,IAAuBC,YAAY,CAACL,IAAD,EAAOC,EAAP,CAAzC;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAACM,SAAD,EAAYC,OAAZ,CAAtD;AAEAN,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMU,QAAQ,GAAGC,mBAAmB,CAACN,SAAD,EAAYC,OAAZ,EAAqBF,OAArB,CAApC;AACC,UAAMQ,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC5BJ,MAAAA,kBAAkB,CAACD,eAAe,GAACE,QAAjB,CAAlB;AACH,KAFwB,EAEtBA,QAAQ,GAAC,IAFa,CAA5B;;AAID,QAAIF,eAAe,KAAKF,OAAxB,EAAiC;AAC7BQ,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AAED,WAAO,MAAME,aAAa,CAACF,QAAD,CAA1B;AAEC,GAZQ,EAYN,CAACR,OAAD,EAAUI,eAAV,EAA2BH,SAA3B,EAAsCC,OAAtC,CAZM,CAAT;AAcA,SAAOE,eAAP;AACH,CAnBD;;AAsBA,MAAMD,YAAY,GAAG,CAACL,IAAD,EAAOC,EAAP,KAAc;AAC/B,MAAI,OAAOD,IAAP,KAAiB,OAAOC,EAA5B,EAAiC;AAC7B,WAAO,IAAP;AACH;;AAED,UAAQ,OAAOD,IAAf;AACI,SAAK,QAAL;AACI,aAAO,CAACA,IAAD,EAAOC,EAAP,CAAP;;AACJ;AACI,aAAO,CAACD,IAAD,EAAOC,EAAP,CAAP;AAJR;AAMH,CAXD;;AAaA,MAAMQ,mBAAmB,GAAG,CAACT,IAAD,EAAOC,EAAP,EAAWC,OAAX,KAAuB;AAC/C,MAAID,EAAE,KAAKD,IAAX,EAAiB;AACb,WAAO,CAACC,EAAE,GAACD,IAAJ,IAAUE,OAAjB;AACH;;AACD,SAAOF,IAAP;AACH,CALD;;AAOA,SACID,aADJ","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useTransition = (from, to, seconds = 1) => {\n    const [valueFrom, valueTo] = decodeFromTo(from, to);\n    const [transitionValue, setTransitionValue] = useState(valueFrom, valueTo);\n\n    useEffect(() => {\n    const velocity = getVelocityInMillis(valueFrom, valueTo, seconds);\n     const interval = setInterval(() => {\n            setTransitionValue(transitionValue+velocity)\n        }, velocity*1000);\n\n    if (transitionValue === valueTo) {\n        clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n\n    }, [seconds, transitionValue, valueFrom, valueTo]);\n\n    return transitionValue;\n}\n\n\nconst decodeFromTo = (from, to) => {\n    if (typeof(from) !== typeof(to)) {\n        return null;\n    }\n\n    switch (typeof(from)) {\n        case \"number\":\n            return [from, to];\n        default:\n            return [from, to];\n    }\n}\n\nconst getVelocityInMillis = (from, to, seconds) => {\n    if (to !== from) {\n        return (to-from)/seconds;\n    }\n    return from;\n}\n\nexport {\n    useTransition\n}"]},"metadata":{},"sourceType":"module"}